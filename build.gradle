buildscript {
    repositories {
        maven { url "https://repo.grails.org/grails/core" }
    }
    dependencies {
        classpath "org.grails:grails-gradle-plugin:$grailsGradlePluginVersion"
        classpath "org.asciidoctor:asciidoctor-gradle-jvm:$asciidoctorJvmVersion"
    }
}

version project.projectVersion
group "org.grails.plugins"

apply plugin:"eclipse"
apply plugin:"idea"
apply plugin:"java-library"
apply plugin:"org.grails.grails-plugin"
apply plugin:"org.grails.grails-publish"
apply plugin:"org.grails.grails-gsp"
apply plugin: "org.asciidoctor.jvm.convert"

repositories {
    maven { url "https://repo.grails.org/grails/core" }
    mavenCentral()
}

configurations {
    documentation
}

dependencies {
    implementation platform("org.grails:grails-bom:$grailsVersion")

    api "org.liquibase:liquibase-core:$liquibaseHibernate5Version"
    api("org.liquibase.ext:liquibase-hibernate5:$liquibaseHibernate5Version") {
        exclude group: 'org.hibernate', module: 'hibernate-core'
        exclude group: 'org.hibernate', module: 'hibernate-entitymanager'
        exclude group: 'org.hibernate', module: 'hibernate-envers'
        exclude group: 'com.h2database', module: 'h2'
    }

    api "org.apache.commons:commons-lang3"
    api("org.grails:grails-shell") {
        exclude group: 'org.slf4j', module: 'slf4j-simple'
    }

    compileOnly "org.springframework.boot:spring-boot-starter-logging"
    compileOnly "org.springframework.boot:spring-boot-autoconfigure"
    compileOnly "org.grails.plugins:hibernate5"
    compileOnly "org.apache.groovy:groovy-sql"
    compileOnly "org.apache.groovy:groovy-xml"

    testImplementation "org.springframework.boot:spring-boot-starter-tomcat"
    testImplementation "org.grails.plugins:hibernate5"
    testImplementation "org.grails:grails-gorm-testing-support"
    testImplementation "org.grails:grails-web-testing-support"
    testImplementation "com.h2database:h2"

    documentation "org.apache.groovy:groovy"
    documentation "org.apache.groovy:groovy-ant"
    documentation "org.apache.groovy:groovy-templates"
    documentation "com.github.javaparser:javaparser-core"
}

compileJava.options.release = 17

grailsPublish {
    githubSlug = 'grails/grails-database-migration'
    license {
        name = 'Apache-2.0'
    }
    title = 'Grails Database Migration Plugin'
    desc = 'Grails Database Migration Plugin'
    developers = [kazukiyamamoto: "Kazuki YAMAMOTO"]
}

asciidoctor {
    baseDirFollowsSourceFile()
    outputDir = layout.buildDirectory.dir('asciidoc').get().getAsFile()

    resources {
        from('src/docs/images')
        into "./images"
    }

    attributes 'experimental'  : 'true',
            'compat-mode'   : 'true',
            'toc'           : 'left',
            'icons'         : 'font',
            'version'       : project.version,
            'groupId'       : project.group,
            'artifactId'    : project.name,
            'sourcedir'     : "${projectDir}/src/main/groovy",
            'liquibaseHibernate5Version': liquibaseHibernate5Version
}

tasks.withType(GroovyCompile) {
    configure(groovyOptions) {
        forkOptions.jvmArgs = ['-Xmx1024m']
    }
}

tasks.withType(Test) {
    useJUnitPlatform()
}

tasks.withType(Groovydoc) {
    configure {
        docTitle = "Grails Database Migration Plugin ${version}"
        source = project.files('src/main/groovy')
        destinationDir = layout.buildDirectory.dir('docs/api').get().getAsFile()
        classpath = configurations.documentation
        groovyClasspath = configurations.documentation
    }
}

task docs(type:Copy, group: 'documentation')  {
    dependsOn(groovydoc, asciidoctor)
    from "${project.layout.buildDirectory.get()}/asciidoc"
    into "${project.layout.buildDirectory.get()}/docs"
}

jar {
    exclude "testapp/**/**"
}

test {
    testLogging {
        events "passed", "skipped", "failed"

        showExceptions true
        exceptionFormat "full"
        showCauses true
        showStackTraces true
    }
    retry {
        maxRetries = 2
        maxFailures = 20
        failOnPassedAfterRetry = true
        filter {
            excludeClasses.add("*GroovyChangeLogSpec")
        }
    }
}
