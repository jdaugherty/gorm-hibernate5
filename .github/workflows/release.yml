name: Release
on:
  release:
    types: [published]
env:
  GIT_USER_NAME: grails-build
  GIT_USER_EMAIL: grails-build@users.noreply.github.com
jobs:
  publish:
    name: "Publish to Sonatype Staging Repository"
    outputs:
      release_version: ${{ steps.release_version.outputs.value }}
      target_branch: ${{ steps.extract_branch.outputs.value }}
    runs-on: ubuntu-24.04
    permissions:
      contents: write
      packages: read
    steps:
      - name: "üì• Checkout repository"
        uses: actions/checkout@v4
      - name: "‚òïÔ∏è Setup JDK"
        uses: actions/setup-java@v4
        with:
          java-version: 17
          distribution: liberica
      - name: "üêò Setup Gradle"
        uses: gradle/actions/setup-gradle@v4
        with:
          develocity-access-key: ${{ secrets.DEVELOCITY_ACCESS_KEY }}
      - name: "‚öôÔ∏è Run pre-release"
        uses: grails/github-actions/pre-release@main
      - name: "üîç Determine Target Branch"
        id: extract_branch
        run: |
          echo "Determining Target Branch"
          TARGET_BRANCH=`cat $GITHUB_EVENT_PATH | jq '.release.target_commitish' | sed -e 's/^"\(.*\)"$/\1/g'`
          echo $TARGET_BRANCH
          echo "value=${TARGET_BRANCH}" >> $GITHUB_OUTPUT
      - name: "üìù Store the current release version"
        id: release_version
        run: echo "value=${GITHUB_REF:11}" >> $GITHUB_OUTPUT
      - name: "üß© Run Assemble"
        if: success()
        id: assemble
        env:
          GITHUB_MAVEN_PASSWORD: ${{ secrets.GITHUB_TOKEN }}
        run: ./gradlew --refresh-dependencies assemble
      - name: "üîê Generate key file for artifact signing"
        env:
          SECRING_FILE: ${{ secrets.SECRING_FILE }}
        run: echo $SECRING_FILE | base64 -d > ${{ github.workspace }}/secring.gpg
      - name: "üì§ Publish to and close Sonatype staging repository"
        id: publish
        env:
          SONATYPE_USERNAME: ${{ secrets.SONATYPE_USERNAME }}
          SONATYPE_PASSWORD: ${{ secrets.SONATYPE_PASSWORD }}
          SONATYPE_STAGING_PROFILE_ID: ${{ secrets.SONATYPE_STAGING_PROFILE_ID }}
          SIGNING_KEY: ${{ secrets.SIGNING_KEY }}
          SIGNING_PASSPHRASE: ${{ secrets.SIGNING_PASSPHRASE }}
          SECRING_FILE: ${{ secrets.SECRING_FILE }}
          GRADLE_ENTERPRISE_ACCESS_KEY: ${{ secrets.GRADLE_ENTERPRISE_ACCESS_KEY }}
          GRADLE_ENTERPRISE_BUILD_CACHE_NODE_USER: ${{ secrets.GRADLE_ENTERPRISE_BUILD_CACHE_NODE_USER }}
          GRADLE_ENTERPRISE_BUILD_CACHE_NODE_KEY: ${{ secrets.GRADLE_ENTERPRISE_BUILD_CACHE_NODE_KEY }}
          GITHUB_MAVEN_PASSWORD: ${{ secrets.GITHUB_TOKEN }}
        run: >
          ./gradlew --no-build-cache
          -Psigning.secretKeyRingFile=${{ github.workspace }}/secring.gpg
          publishToSonatype
          closeSonatypeStagingRepository
  release:
    environment: release
    name: "Release Sonatype Staging Repository"
    needs: publish
    runs-on: ubuntu-24.04
    permissions:
      contents: write
      packages: read
    steps:
      - name: "üì• Checkout repository"
        uses: actions/checkout@v4
        with:
          ref: v${{ needs.publish.outputs.release_version }}
      - name: "‚òïÔ∏è Setup JDK"
        uses: actions/setup-java@v4
        with:
          java-version: 17
          distribution: liberica
      - name: "üêò Setup Gradle"
        uses: gradle/actions/setup-gradle@v4
        with:
          develocity-access-key: ${{ secrets.DEVELOCITY_ACCESS_KEY }}
      - name: "üöÄ Release Sonatype Staging Repository"
        env:
          SONATYPE_USERNAME: ${{ secrets.SONATYPE_USERNAME }}
          SONATYPE_PASSWORD: ${{ secrets.SONATYPE_PASSWORD }}
          SONATYPE_STAGING_PROFILE_ID: ${{ secrets.SONATYPE_STAGING_PROFILE_ID }}
          SIGNING_KEY: ${{ secrets.SIGNING_KEY }}
          SIGNING_PASSPHRASE: ${{ secrets.SIGNING_PASSPHRASE }}
          SECRING_FILE: ${{ secrets.SECRING_FILE }}
          GRADLE_ENTERPRISE_ACCESS_KEY: ${{ secrets.GRADLE_ENTERPRISE_ACCESS_KEY }}
          GRADLE_ENTERPRISE_BUILD_CACHE_NODE_USER: ${{ secrets.GRADLE_ENTERPRISE_BUILD_CACHE_NODE_USER }}
          GRADLE_ENTERPRISE_BUILD_CACHE_NODE_KEY: ${{ secrets.GRADLE_ENTERPRISE_BUILD_CACHE_NODE_KEY }}
          GITHUB_MAVEN_PASSWORD: ${{ secrets.GITHUB_TOKEN }}
        run: >
          ./gradlew
          findSonatypeStagingRepository
          releaseSonatypeStagingRepository
      - name: "‚öôÔ∏è Run post-release"
        if: success()
        uses: grails/github-actions/post-release@main
  docs:
    environment: release
    name: "Publish Documentation"
    needs: publish
    runs-on: ubuntu-24.04
    permissions:
      contents: write
      packages: read
    steps:
      - name: "üì• Checkout repository"
        uses: actions/checkout@v4
        with:
          ref: v${{ needs.publish.outputs.release_version }}
      - name: "‚òïÔ∏è Setup JDK"
        uses: actions/setup-java@v4
        with:
          distribution: 'liberica'
          java-version: '17'
      - name: "üêò Setup Gradle"
        uses: gradle/actions/setup-gradle@v4
        with:
          develocity-access-key: ${{ secrets.DEVELOCITY_ACCESS_KEY }}
      - name: "üìñ Generate documentation"
        env:
          GRADLE_ENTERPRISE_ACCESS_KEY: ${{ secrets.GRADLE_ENTERPRISE_ACCESS_KEY }}
          GRADLE_ENTERPRISE_BUILD_CACHE_NODE_USER: ${{ secrets.GRADLE_ENTERPRISE_BUILD_CACHE_NODE_USER }}
          GRADLE_ENTERPRISE_BUILD_CACHE_NODE_KEY: ${{ secrets.GRADLE_ENTERPRISE_BUILD_CACHE_NODE_KEY }}
          GITHUB_MAVEN_PASSWORD: ${{ secrets.GITHUB_TOKEN }}
        run: ./gradlew docs:docs
      - name: Export Gradle Properties
        uses: grails/github-actions/export-gradle-properties@main
      - name: Determine docs target repository
        if: success()
        uses: haya14busa/action-cond@v1
        id: docs_target
        with:
          cond: ${{ github.repository == 'grails/gorm-hibernate5' }}
          if_true: "grails/grails-data-mapping"
          if_false: ${{ github.repository }}
      - name: "üì§ Publish documentation to Github Pages"
        if: success()
        uses: grails/github-pages-deploy-action@grails
        env:
          SKIP_LATEST: ${{ contains(steps.release_version.outputs.release_version, 'M') }}
          TARGET_REPOSITORY: ${{ steps.docs_target.outputs.value }}
          GH_TOKEN: ${{ secrets.GH_TOKEN }}
          BRANCH: gh-pages
          FOLDER: docs/build/docs
          DOC_SUB_FOLDER: hibernate
          DOC_FOLDER: gh-pages
          COMMIT_EMAIL: ${{ env.GIT_USER_EMAIL }}
          COMMIT_NAME: ${{ env.GIT_USER_NAME }}
          VERSION: ${{ needs.publish.outputs.release_version }}
